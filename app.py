from flask import Flask, request, jsonify, send_file
from faster_whisper import WhisperModel
from google import genai
from google.genai import types
import tempfile
import os
import requests
from flask_cors import CORS
import wave
import base64
import subprocess

app = Flask(__name__)
CORS(app)

# إعداد Whisper
model = WhisperModel("base", compute_type="int8")

# إعداد Google Gemini TTS
API_KEY = "AIzaSyAHGHJG_jsdk97QlqkmAlmN4uCDbSPC0cE"
client = genai.Client(api_key=API_KEY)


# دالة لحفظ PCM إلى MP3 عبر WAV مؤقت
def pcm_to_mp3(pcm_bytes, temp_wav="temp.wav", mp3_file="out.mp3", channels=1, rate=24000, sample_width=2):
    if isinstance(pcm_bytes, str):
        pcm_bytes = base64.b64decode(pcm_bytes)
    
    with wave.open(temp_wav, "wb") as wf:
        wf.setnchannels(channels)
        wf.setsampwidth(sample_width)
        wf.setframerate(rate)
        wf.writeframes(pcm_bytes)

    subprocess.run(['ffmpeg', '-y', '-i', temp_wav, mp3_file],
                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    os.remove(temp_wav)

@app.route('/transcribe', methods=['POST'])
def transcribe_audio():
    for f in ['out.wav', 'out.mp3', 'temp.wav']:
        if os.path.exists(f):
            os.remove(f)

    if 'audio' not in request.files:
        return jsonify({'error': 'No audio file uploaded'}), 400

    file = request.files['audio']
    with tempfile.NamedTemporaryFile(delete=False, suffix=".webm") as tmp:
        file.save(tmp.name)
        try:
            segments, _ = model.transcribe(tmp.name)
            text = " ".join([seg.text.strip() for seg in segments])
        finally:
            os.remove(tmp.name)

    webhook_url = "https://n8n.ai.oofoq.com/webhook/from-whisper"
    try:
        res = requests.post(webhook_url, json={"text": text}, timeout=30)
        n8n_response = res.json()
        output_text = (
            n8n_response.get("output") or 
            n8n_response.get("response") or 
            n8n_response.get("message") or 
            str(n8n_response)
        )
    except Exception as e:
        print("⚠️ Failed to send to n8n:", e)
        output_text = "عذرًا، حدث خطأ أثناء الاتصال بالمساعد."

    audio_generated = False
    try:
        response = client.models.generate_content(
            model="gemini-2.5-flash-preview-tts",
            contents=f"Say in a friendly tone with saudia arabian accent: {output_text}",
            config=types.GenerateContentConfig(
                response_modalities=["AUDIO"],
                speech_config=types.SpeechConfig(
                    voice_config=types.VoiceConfig(
                        prebuilt_voice_config=types.PrebuiltVoiceConfig(
                            voice_name='kore'
                        )
                    )
                )
            )
        )

        if response.candidates:
            for part in response.candidates[0].content.parts:
                if hasattr(part, 'inline_data') and part.inline_data:
                    audio_data = part.inline_data.data
                    pcm_to_mp3(audio_data)  # حفظ كـ mp3
                    audio_generated = True
                    print("✅ MP3 audio generated by Gemini")
                    break

    except Exception as e:
        print("❌ Gemini TTS error:", e)
        try:
            from gtts import gTTS
            tts = gTTS(text=output_text, lang='ar')
            tts.save("out.mp3")
            audio_generated = True
            print("✅ gTTS fallback successful")
        except Exception as e2:
            print("❌ gTTS fallback error:", e2)

    return jsonify({
        "transcription": text,
        "n8n_reply": output_text,
        "audio_ready": audio_generated,
        "audio_url": "/audio"
    })

@app.route('/audio')
def get_audio():
    if os.path.exists('out.mp3'):
        return send_file('out.mp3', mimetype='audio/mp3')
    else:
        return jsonify({'error': 'Audio file not found'}), 404

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5005)
